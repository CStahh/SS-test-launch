<CrossmintPayButton
            collectionTitle="<TITLE_FOR_YOUR_COLLECTION>"
            collectionDescription="<DESCRIPTION_OF_YOUR_COLLECTION>"
            collectionPhoto="<OPT_URL_TO_PHOTO_COVER>"
            clientId="<YOUR_CLIENT_ID>"
            mintConfig={{
                price: "<SELECTED_PRICE>"
                
            if (gsTest && account) {
            setIsMinting(true)
            setIsError(false)

            await gsTest.methods.mint(1).send({ from: account, value: 1 })
                .on('confirmation', async () => {
                    const maxSupply = await gsTest.methods.maxSupply().call()
                    const totalSupply = await gsTest.methods.totalSupply().call()
                    setSupplyAvailable(maxSupply - totalSupply)

                    const ownerOf = await gsTest.methods.walletOfOwner(account).call()
                    setOwnerOf(ownerOf)
                })
                .on('error', (error) => {
                    window.alert(error)
                    setIsError(true)
                })
        }
            }}
        />






<div>
<h3>Mint your NFT in</h3>
{revealTime !== 0 && <Countdown date={currentTime + (revealTime - currentTime)} className='countdown' />}
<ul>
<li>500 generated SMART images using an art generator</li>
<li>Mint using a credit card or connect a crypto wallet</li>
<li>Viewable on Opensea shortly after minting</li>
</ul>

{isMinting ? (
<Spinner animation="border" className='p-3 m-2' />
) : (
<button onClick={mintNFTHandler} className='button mint-button mt-3'>Mint</button>
)}

{ownerOf.length > 0 &&
<p><small>View your NFT on
<a
href={`${openseaURL}/assets/${gsTest._address}/${ownerOf[0]}`}
target='_blank'
style={{ display: 'inline-block', marginLeft: '3px' }}>
OpenSea
</a>
</small></p>}

<CrossmintPayButton
collectionTitle="<TITLE_FOR_YOUR_COLLECTION>"
collectionDescription="<DESCRIPTION_OF_YOUR_COLLECTION>"
collectionPhoto="<OPT_URL_TO_PHOTO_COVER>"
clientId="<YOUR_CLIENT_ID>"
mintConfig={{
price: "<SELECTED_PRICE>"

if (gsTest && account) {
setIsMinting(true)
setIsError(false)

await gsTest.methods.mint(1).send({ from: account, value: 10000000000000000 })
.on('confirmation', async () => {
const maxSupply = await gsTest.methods.maxSupply().call()
const totalSupply = await gsTest.methods.totalSupply().call()
setSupplyAvailable(maxSupply - totalSupply)

const ownerOf = await gsTest.methods.walletOfOwner(account).call()
setOwnerOf(ownerOf)
})
.on('error', (error) => {
window.alert(error)
setIsError(true)
})
}
}}
/>
</div>






// Add this import line at the top
import { CrossmintPayButton } from "@crossmint/client-sdk-react-ui";

export default function Index() {
    return (
        ...
        
        // Add this next to your minting button
        <CrossmintPayButton
            collectionTitle="<TITLE_FOR_YOUR_COLLECTION>"
            collectionDescription="<DESCRIPTION_OF_YOUR_COLLECTION>"
            collectionPhoto="<OPT_URL_TO_PHOTO_COVER>"
            clientId="<YOUR_CLIENT_ID>"
            mintConfig={{
                price: "<SELECTED_PRICE>",
                // ... mint arguments ...
            if (gsTest && account) {
            setIsMinting(true)
            setIsError(false)

            await gsTest.methods.mint(1).send({ from: account, value: 10000000000000000 })
                .on('confirmation', async () => {
                    const maxSupply = await gsTest.methods.maxSupply().call()
                    const totalSupply = await gsTest.methods.totalSupply().call()
                    setSupplyAvailable(maxSupply - totalSupply)

                    const ownerOf = await gsTest.methods.walletOfOwner(account).call()
                    setOwnerOf(ownerOf)
                })
                .on('error', (error) => {
                    window.alert(error)
                    setIsError(true)
                })
        }
            }}
        />
        
        ...
    );
}